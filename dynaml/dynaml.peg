package dynaml

type DynamlGrammar Peg {}

Dynaml <- (Prefer / Expression) !.
Prefer <- ws 'prefer' req_ws Expression
Expression <- ws Level4 ws

Level4 <- Level3 ( req_ws Or )*
Or <- '||' req_ws Level3

Level3 <- Level2 ( Concatenation )*
Concatenation <- req_ws Level2

Level2 <-  Level1 ( req_ws ( Addition / Subtraction ) )*
Addition <- '+' req_ws Level1
Subtraction <- '-' req_ws Level1

Level1 <- Level0 ( req_ws ( Multiplication / Division / Modulo ) )*
Multiplication <- '*' req_ws Level0
Division <-  '/' req_ws Level0
Modulo <-  '%' req_ws Level0

Level0 <- Call / Grouped / Boolean / Nil / String / Integer / List / Merge / Auto / Mapping / Lambda / Reference

Grouped <- '(' Expression ')'

Call <- ( Reference / Grouped ) '(' Arguments ')'
Name <- [a-zA-Z0-9_]+
Arguments <- Expression (NextExpression)*
NextExpression <- ',' Expression

Integer <- '-'? [0-9_]+

String <- '"' ('\\"' / !'"' .)* '"'

Boolean <- 'true' / 'false'

Nil <- 'nil' / '~'

List <- '[' Contents? ']'
Contents <- Expression (NextExpression)*

Merge <- RefMerge / SimpleMerge
RefMerge <- 'merge' !( req_ws Required ) ( req_ws (Replace / On ))? req_ws Reference
SimpleMerge <- 'merge' ( req_ws (Replace/Required/On) )?
Replace <- 'replace'
Required <- 'required'
On <- 'on' req_ws Name

Auto <- 'auto'

Mapping <- 'map[' Expression ( LambdaExpr / ( '|' Expression )) ']'
Lambda <- 'lambda' ( LambdaRef / LambdaExpr )
LambdaRef <- req_ws Expression
LambdaExpr <- ws '|' ws Name (NextName)* ws '|' ws '->' Expression
NextName <- ws ',' ws Name

Reference <- '.'? Key ('.' Key / '.' '[' [0-9]+ ']')*
Key <- [a-zA-Z0-9_] [a-zA-Z0-9_\-]* ( ':' [a-zA-Z0-9_] [a-zA-Z0-9_\-]* )?

ws <- [ \t\n\r]*

req_ws <- [ \t\n\r]+
